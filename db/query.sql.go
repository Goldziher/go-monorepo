// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, full_name, email, phone_number, profile_picture_url, username, hashed_password, created_at
FROM "user"
WHERE email = $1
    LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.PhoneNumber,
		&i.ProfilePictureUrl,
		&i.Username,
		&i.HashedPassword,
		&i.CreatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, full_name, email, phone_number, profile_picture_url, username, hashed_password, created_at
FROM "user"
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.PhoneNumber,
		&i.ProfilePictureUrl,
		&i.Username,
		&i.HashedPassword,
		&i.CreatedAt,
	)
	return i, err
}

const upsertUser = `-- name: UpsertUser :one
INSERT INTO "user" (full_name, email, phone_number, profile_picture_url, username, hashed_password)
VALUES ($1, $2, $3, $4, $5, $6)
ON CONFLICT (email)
    DO UPDATE SET full_name = $1,
                  phone_number = $3,
                  profile_picture_url = $4,
                  username  = $5
RETURNING "user".id
`

type UpsertUserParams struct {
	FullName          string `json:"full_name"`
	Email             string `json:"email"`
	PhoneNumber       string `json:"phone_number"`
	ProfilePictureUrl string `json:"profile_picture_url"`
	Username          string `json:"username"`
	HashedPassword    string `json:"hashed_password"`
}

func (q *Queries) UpsertUser(ctx context.Context, arg UpsertUserParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, upsertUser,
		arg.FullName,
		arg.Email,
		arg.PhoneNumber,
		arg.ProfilePictureUrl,
		arg.Username,
		arg.HashedPassword,
	)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}
